// Calculate discount percentage
const calculateDiscount = (priceBefore, currentPrice) => {
  const numPriceBefore =
    typeof priceBefore === "string" ? parseFloat(priceBefore) : priceBefore;
  const numCurrentPrice =
    typeof currentPrice === "string" ? parseFloat(currentPrice) : currentPrice;

  if (
    isNaN(numPriceBefore) ||
    isNaN(numCurrentPrice) ||
    numPriceBefore <= 0 ||
    numCurrentPrice <= 0
  ) {
    return 0;
  }

  const discount = ((numPriceBefore - numCurrentPrice) / numPriceBefore) * 100;
  return Math.round(discount);
};

{/*
{/* Price with Discount and Original Price */}
              
                    {/* Discount Badge */}
                    {discountPercentage > 0 ? (
                      <span className="bg-red-100 text-red-800 text-sm font-medium px-2.5 py-0.5 rounded-full">
                        -{discountPercentage}%
                      </span>
                    ) : (
                      <span className="bg-gray-100 text-gray-600 text-sm font-medium px-2.5 py-0.5 rounded-full">
                        0% discount
                      </span>
                    )}
                  </div>

                  <div className="flex items-center gap-3">
                    {/* Current Price */}
                    <span className="text-2xl sm:text-3xl font-semibold text-green-600">
                      ₦{formatPrice(product?.price)}
                    </span>

                    {/* Original Price (if exists) */}
                    {hasPriceBefore && (
                      <span className="text-lg sm:text-xl font-medium text-gray-500 line-through">
                        ₦{formatPrice(product.priceBefore)}
                      </span>
                    )}
                  </div>
                </div>
              </div> 
              */}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------


// Price formatting utility function
const formatPrice = (price, decimals = 2) => {
  const numPrice = typeof price === "string" ? parseFloat(price) : price;

  if (isNaN(numPrice)) return "0.00";

  return numPrice.toLocaleString("en-US", {
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals,
  });
};

{/*   ₦{formatPrice(product?.price)} */}



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------


// Product Rating Section Component
const ProductRating = ({ rating = 0 }) => {
  const numRating = typeof rating === "string" ? parseFloat(rating) : rating;
  const validRating =
    isNaN(numRating) || numRating < 0 ? 0 : Math.min(numRating, 5);
  const displayRating =
    validRating % 1 === 0 ? validRating.toString() : validRating.toFixed(1);

  return (
    <div className="mb-4 sm:mb-6">
      <div className="flex items-center gap-3">
        <StarRating rating={validRating} />
        <div className="flex items-center gap-2">
          <span className="text-sm font-medium text-gray-700">
            {displayRating} out of 5
          </span>
          {validRating === 0 && (
            <span className="text-sm text-gray-500">
              (No ratings available)
            </span>
          )}
        </div>
      </div>
    </div>
  );
};
